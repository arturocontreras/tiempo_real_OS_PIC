CCS PCM C Compiler, Version 4.104, 5967               28-oct-12 21:18

               Filename: C:\Documents and Settings\USER\Escritorio\tiempor real,presentacion\tiempo real2\codigoc1\avance11.lst

               ROM used: 2498 words (30%)
                         Largest free fragment is 2048
               RAM used: 34 (9%) at main() level
                         52 (14%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   032
001D:  BTFSS  0B.5
001E:  GOTO   021
001F:  BTFSC  0B.2
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   040
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   05F
.................... #include <16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #fuses XT,NOPROTECT,NOWDT 
.................... #use delay(clock=4000000) 
*
004A:  MOVLW  4E
004B:  MOVWF  04
004C:  BCF    03.7
004D:  MOVF   00,W
004E:  BTFSC  03.2
004F:  GOTO   05E
0050:  MOVLW  01
0051:  MOVWF  78
0052:  CLRF   77
0053:  DECFSZ 77,F
0054:  GOTO   053
0055:  DECFSZ 78,F
0056:  GOTO   052
0057:  MOVLW  4A
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  GOTO   05C
005C:  DECFSZ 00,F
005D:  GOTO   050
005E:  RETURN
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define LCD_ENABLE_PIN  PIN_D2                                   //// 
.................... #define LCD_RS_PIN      PIN_D0                                    //// 
.................... #define LCD_RW_PIN      PIN_D1                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7                                    //// 
.................... #include <LCD.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_D0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_D1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_D2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
012E:  BSF    08.4
....................    output_float(LCD_DATA5); 
012F:  BSF    08.5
....................    output_float(LCD_DATA6); 
0130:  BSF    08.6
....................    output_float(LCD_DATA7); 
0131:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0132:  BCF    03.5
0133:  BSF    08.1
0134:  BSF    03.5
0135:  BCF    08.1
....................    delay_cycles(1); 
0136:  NOP
....................    lcd_output_enable(1); 
0137:  BCF    03.5
0138:  BSF    08.2
0139:  BSF    03.5
013A:  BCF    08.2
....................    delay_cycles(1); 
013B:  NOP
....................    high = lcd_read_nibble(); 
013C:  BCF    03.5
013D:  CALL   0FA
013E:  MOVF   78,W
013F:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
0140:  BCF    08.2
0141:  BSF    03.5
0142:  BCF    08.2
....................    delay_cycles(1); 
0143:  NOP
....................    lcd_output_enable(1); 
0144:  BCF    03.5
0145:  BSF    08.2
0146:  BSF    03.5
0147:  BCF    08.2
....................    delay_us(1); 
0148:  NOP
....................    low = lcd_read_nibble(); 
0149:  BCF    03.5
014A:  CALL   0FA
014B:  MOVF   78,W
014C:  MOVWF  47
....................        
....................    lcd_output_enable(0); 
014D:  BCF    08.2
014E:  BSF    03.5
014F:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0150:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0151:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0152:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0153:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0154:  BCF    03.5
0155:  SWAPF  48,W
0156:  MOVWF  77
0157:  MOVLW  F0
0158:  ANDWF  77,F
0159:  MOVF   77,W
015A:  IORWF  47,W
015B:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00FA:  CLRF   49
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00FB:  BSF    03.5
00FC:  BSF    08.4
00FD:  MOVLW  00
00FE:  BCF    03.5
00FF:  BTFSC  08.4
0100:  MOVLW  01
0101:  IORWF  49,F
....................    n |= input(LCD_DATA5) << 1; 
0102:  BSF    03.5
0103:  BSF    08.5
0104:  MOVLW  00
0105:  BCF    03.5
0106:  BTFSC  08.5
0107:  MOVLW  01
0108:  MOVWF  77
0109:  BCF    03.0
010A:  RLF    77,F
010B:  MOVF   77,W
010C:  IORWF  49,F
....................    n |= input(LCD_DATA6) << 2; 
010D:  BSF    03.5
010E:  BSF    08.6
010F:  MOVLW  00
0110:  BCF    03.5
0111:  BTFSC  08.6
0112:  MOVLW  01
0113:  MOVWF  77
0114:  RLF    77,F
0115:  RLF    77,F
0116:  MOVLW  FC
0117:  ANDWF  77,F
0118:  MOVF   77,W
0119:  IORWF  49,F
....................    n |= input(LCD_DATA7) << 3; 
011A:  BSF    03.5
011B:  BSF    08.7
011C:  MOVLW  00
011D:  BCF    03.5
011E:  BTFSC  08.7
011F:  MOVLW  01
0120:  MOVWF  77
0121:  RLF    77,F
0122:  RLF    77,F
0123:  RLF    77,F
0124:  MOVLW  F8
0125:  ANDWF  77,F
0126:  MOVF   77,W
0127:  IORWF  49,F
....................     
....................    return(n); 
0128:  MOVF   49,W
0129:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
012A:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00CF:  BTFSC  48.0
00D0:  GOTO   0D3
00D1:  BCF    08.4
00D2:  GOTO   0D4
00D3:  BSF    08.4
00D4:  BSF    03.5
00D5:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00D6:  BCF    03.5
00D7:  BTFSC  48.1
00D8:  GOTO   0DB
00D9:  BCF    08.5
00DA:  GOTO   0DC
00DB:  BSF    08.5
00DC:  BSF    03.5
00DD:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00DE:  BCF    03.5
00DF:  BTFSC  48.2
00E0:  GOTO   0E3
00E1:  BCF    08.6
00E2:  GOTO   0E4
00E3:  BSF    08.6
00E4:  BSF    03.5
00E5:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00E6:  BCF    03.5
00E7:  BTFSC  48.3
00E8:  GOTO   0EB
00E9:  BCF    08.7
00EA:  GOTO   0EC
00EB:  BSF    08.7
00EC:  BSF    03.5
00ED:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00EE:  NOP
....................    lcd_output_enable(1); 
00EF:  BCF    03.5
00F0:  BSF    08.2
00F1:  BSF    03.5
00F2:  BCF    08.2
....................    delay_us(2); 
00F3:  GOTO   0F4
....................    lcd_output_enable(0); 
00F4:  BCF    03.5
00F5:  BCF    08.2
00F6:  BSF    03.5
00F7:  BCF    08.2
.................... } 
00F8:  BCF    03.5
00F9:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
012B:  BCF    08.0
012C:  BSF    03.5
012D:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
015C:  MOVF   78,W
015D:  MOVWF  47
015E:  BTFSS  47.7
015F:  GOTO   162
0160:  BSF    03.5
0161:  GOTO   12E
....................    lcd_output_rs(address); 
0162:  MOVF   45,F
0163:  BTFSS  03.2
0164:  GOTO   167
0165:  BCF    08.0
0166:  GOTO   168
0167:  BSF    08.0
0168:  BSF    03.5
0169:  BCF    08.0
....................    delay_cycles(1); 
016A:  NOP
....................    lcd_output_rw(0); 
016B:  BCF    03.5
016C:  BCF    08.1
016D:  BSF    03.5
016E:  BCF    08.1
....................    delay_cycles(1); 
016F:  NOP
....................    lcd_output_enable(0); 
0170:  BCF    03.5
0171:  BCF    08.2
0172:  BSF    03.5
0173:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
0174:  BCF    03.5
0175:  SWAPF  46,W
0176:  MOVWF  47
0177:  MOVLW  0F
0178:  ANDWF  47,F
0179:  MOVF   47,W
017A:  MOVWF  48
017B:  CALL   0CF
....................    lcd_send_nibble(n & 0xf); 
017C:  MOVF   46,W
017D:  ANDLW  0F
017E:  MOVWF  47
017F:  MOVWF  48
0180:  CALL   0CF
.................... } 
0181:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0182:  BSF    03.5
0183:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0184:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0185:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0186:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0187:  BCF    08.2
....................    lcd_rs_tris(); 
0188:  BCF    08.0
....................    lcd_rw_tris(); 
0189:  BCF    08.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
018A:  BCF    03.5
018B:  BCF    08.0
018C:  BSF    03.5
018D:  BCF    08.0
....................    lcd_output_rw(0); 
018E:  BCF    03.5
018F:  BCF    08.1
0190:  BSF    03.5
0191:  BCF    08.1
....................    lcd_output_enable(0); 
0192:  BCF    03.5
0193:  BCF    08.2
0194:  BSF    03.5
0195:  BCF    08.2
0196:  BCF    03.5
0197:  CLRF   27
0198:  BTFSC  0B.7
0199:  BSF    27.7
019A:  BCF    0B.7
....................      
....................    delay_ms(15); 
019B:  MOVLW  0F
019C:  MOVWF  4E
019D:  CALL   04A
019E:  BTFSC  27.7
019F:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
01A0:  MOVLW  01
01A1:  MOVWF  3D
01A2:  MOVF   3D,W
01A3:  SUBLW  03
01A4:  BTFSS  03.0
01A5:  GOTO   1B4
....................    { 
....................        lcd_send_nibble(3); 
01A6:  MOVLW  03
01A7:  MOVWF  48
01A8:  CALL   0CF
01A9:  CLRF   27
01AA:  BTFSC  0B.7
01AB:  BSF    27.7
01AC:  BCF    0B.7
....................        delay_ms(5); 
01AD:  MOVLW  05
01AE:  MOVWF  4E
01AF:  CALL   04A
01B0:  BTFSC  27.7
01B1:  BSF    0B.7
....................    } 
01B2:  INCF   3D,F
01B3:  GOTO   1A2
....................      
....................    lcd_send_nibble(2); 
01B4:  MOVLW  02
01B5:  MOVWF  48
01B6:  CALL   0CF
....................    for(i=0;i<=3;++i) 
01B7:  CLRF   3D
01B8:  MOVF   3D,W
01B9:  SUBLW  03
01BA:  BTFSS  03.0
01BB:  GOTO   1C5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01BC:  MOVF   3D,W
01BD:  CALL   038
01BE:  MOVWF  3E
01BF:  CLRF   45
01C0:  MOVF   3E,W
01C1:  MOVWF  46
01C2:  CALL   12B
01C3:  INCF   3D,F
01C4:  GOTO   1B8
.................... } 
01C5:  BSF    0A.3
01C6:  BCF    0A.4
01C7:  GOTO   047 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
01C8:  DECFSZ 42,W
01C9:  GOTO   1CB
01CA:  GOTO   1CE
....................       address=LCD_LINE_TWO; 
01CB:  MOVLW  40
01CC:  MOVWF  43
....................    else 
01CD:  GOTO   1CF
....................       address=0; 
01CE:  CLRF   43
....................       
....................    address+=x-1; 
01CF:  MOVLW  01
01D0:  SUBWF  41,W
01D1:  ADDWF  43,F
....................    lcd_send_byte(0,0x80|address); 
01D2:  MOVF   43,W
01D3:  IORLW  80
01D4:  MOVWF  44
01D5:  CLRF   45
01D6:  MOVF   44,W
01D7:  MOVWF  46
01D8:  CALL   12B
.................... } 
01D9:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
01DA:  MOVF   40,W
01DB:  XORLW  0C
01DC:  BTFSC  03.2
01DD:  GOTO   1E5
01DE:  XORLW  06
01DF:  BTFSC  03.2
01E0:  GOTO   1F3
01E1:  XORLW  02
01E2:  BTFSC  03.2
01E3:  GOTO   1F9
01E4:  GOTO   1FE
....................       case '\f'   :  lcd_send_byte(0,1); 
01E5:  CLRF   45
01E6:  MOVLW  01
01E7:  MOVWF  46
01E8:  CALL   12B
01E9:  CLRF   27
01EA:  BTFSC  0B.7
01EB:  BSF    27.7
01EC:  BCF    0B.7
....................                      delay_ms(2); 
01ED:  MOVLW  02
01EE:  MOVWF  4E
01EF:  CALL   04A
01F0:  BTFSC  27.7
01F1:  BSF    0B.7
....................                      break; 
01F2:  GOTO   204
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01F3:  MOVLW  01
01F4:  MOVWF  41
01F5:  MOVLW  02
01F6:  MOVWF  42
01F7:  CALL   1C8
01F8:  GOTO   204
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01F9:  CLRF   45
01FA:  MOVLW  10
01FB:  MOVWF  46
01FC:  CALL   12B
01FD:  GOTO   204
....................       
....................       default     : lcd_send_byte(1,c);     break; 
01FE:  MOVLW  01
01FF:  MOVWF  45
0200:  MOVF   40,W
0201:  MOVWF  46
0202:  CALL   12B
0203:  GOTO   204
....................    } 
.................... } 
0204:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... //definiendo puertos 
.................... #byte tris_a =0x85 
.................... #byte port_a =0x05 
.................... #byte tris_b =0x86 
.................... #byte port_b =0x06 
.................... #byte tris_c =0x87 
.................... #byte port_c =0x07 
.................... #byte tris_d =0x88 
.................... #byte port_d =0x08 
.................... #byte tris_e =0x89 
.................... #byte port_e =0x09 
.................... //definiendo bits 
.................... #bit rb0=port_b.0 //quantum 
.................... #bit rb1=port_b.1 //proceso1 
.................... #bit rb2=port_b.2 //proceso2 
.................... #bit rb3=port_b.3 //proceso3 
.................... #bit rb4=port_b.4 //proceso4 
.................... #bit rb5=port_b.5 //sistema operativo 
.................... #bit rb6=port_b.6 //indicador si funciona el quantum 
....................  
.................... //estructura del bloque de control de procesos(PCB) 
....................  struct pcb { 
....................  int id; 
....................  int estado_proceso; 
....................  int dir_inicio; 
....................  int tiempo; 
....................  int acumulador; 
....................  }; 
....................   
.................... //definiendo variables 
.................... char tecla_pulsada; 
.................... int mensaje_recibido; 
.................... int contador1=0; 
.................... int contador2=0; 
.................... int contador3=0; 
.................... int contador4=0; 
.................... int i; 
.................... int copia1; 
.................... int copia2; 
.................... int copia3; 
.................... int copia4; 
.................... //tiempos de duracion de cada proceso 
.................... long int time1=1000; 
.................... long int time2=2000; 
.................... long int time3=3000; 
.................... long int time4=4000; 
.................... long int quantum=250;/// 250 ms 
.................... //interrupciones 
.................... #int_rda 
.................... void RDA_isr(){ 
.................... tecla_pulsada=getc(); 
*
0040:  BTFSS  0C.5
0041:  GOTO   040
0042:  MOVF   1A,W
0043:  MOVWF  28
.................... mensaje_recibido=1; 
0044:  MOVLW  01
0045:  MOVWF  29
.................... //!port_b=0; 
.................... } 
....................  
.................... //funcion interrupcion serial 
0046:  BCF    0C.5
0047:  BCF    0A.3
0048:  BCF    0A.4
0049:  GOTO   021
.................... #int_timer0 
.................... //interrupcion del timer0,para hallar el quantum 
.................... //funcion quantum  
.................... void timer0_isr(){ 
.................... delay_ms(quantum-4); 
*
005F:  MOVLW  04
0060:  SUBWF  3B,W
0061:  MOVWF  4B
0062:  MOVF   3C,W
0063:  MOVWF  4C
0064:  MOVLW  00
0065:  BTFSS  03.0
0066:  MOVLW  01
0067:  SUBWF  4C,F
0068:  MOVF   4C,W
0069:  MOVWF  4D
006A:  INCF   4D,F
006B:  DECF   4D,F
006C:  BTFSC  03.2
006D:  GOTO   072
006E:  MOVLW  FF
006F:  MOVWF  4E
0070:  CALL   04A
0071:  GOTO   06B
0072:  MOVF   4B,W
0073:  MOVWF  4E
0074:  CALL   04A
....................    rb6=!rb6; 
0075:  MOVLW  40
0076:  XORWF  06,F
....................    rb0=!rb0; 
0077:  MOVLW  01
0078:  XORWF  06,F
....................    set_timer0(0x01); 
0079:  MOVWF  01
.................... } 
....................   
.................... //funciones de los procesos 
.................... //proceso1: 
007A:  BCF    0B.2
007B:  BCF    0A.3
007C:  BCF    0A.4
007D:  GOTO   021
.................... void do_proceso1(){ 
.................... lcd_putc("\f"); 
*
02A8:  MOVLW  7E
02A9:  BSF    03.6
02AA:  MOVWF  0D
02AB:  MOVLW  00
02AC:  MOVWF  0F
02AD:  BCF    03.6
02AE:  CALL   205
.................... lcd_putc("proceso 1"); 
02AF:  MOVLW  7F
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  MOVLW  00
02B3:  MOVWF  0F
02B4:  BCF    03.6
02B5:  CALL   205
.................... puts("proceso 1"); 
02B6:  MOVLW  84
02B7:  BSF    03.6
02B8:  MOVWF  0D
02B9:  MOVLW  00
02BA:  MOVWF  0F
02BB:  BCF    03.6
02BC:  CALL   260
02BD:  MOVLW  0D
02BE:  BTFSS  0C.4
02BF:  GOTO   2BE
02C0:  MOVWF  19
02C1:  MOVLW  0A
02C2:  BTFSS  0C.4
02C3:  GOTO   2C2
02C4:  MOVWF  19
.................... rb1=1; 
02C5:  BSF    06.1
.................... } 
02C6:  RETURN
.................... //proceso2: 
.................... void do_proceso2(){ 
.................... lcd_putc("\f"); 
02C7:  MOVLW  89
02C8:  BSF    03.6
02C9:  MOVWF  0D
02CA:  MOVLW  00
02CB:  MOVWF  0F
02CC:  BCF    03.6
02CD:  CALL   205
.................... lcd_putc("proceso 2"); 
02CE:  MOVLW  8A
02CF:  BSF    03.6
02D0:  MOVWF  0D
02D1:  MOVLW  00
02D2:  MOVWF  0F
02D3:  BCF    03.6
02D4:  CALL   205
.................... puts("proceso 2"); 
02D5:  MOVLW  8F
02D6:  BSF    03.6
02D7:  MOVWF  0D
02D8:  MOVLW  00
02D9:  MOVWF  0F
02DA:  BCF    03.6
02DB:  CALL   260
02DC:  MOVLW  0D
02DD:  BTFSS  0C.4
02DE:  GOTO   2DD
02DF:  MOVWF  19
02E0:  MOVLW  0A
02E1:  BTFSS  0C.4
02E2:  GOTO   2E1
02E3:  MOVWF  19
.................... rb2=1; 
02E4:  BSF    06.2
.................... } 
02E5:  RETURN
.................... //proceso3: 
.................... void do_proceso3(){ 
.................... lcd_putc("\f"); 
02E6:  MOVLW  94
02E7:  BSF    03.6
02E8:  MOVWF  0D
02E9:  MOVLW  00
02EA:  MOVWF  0F
02EB:  BCF    03.6
02EC:  CALL   205
.................... lcd_putc("proceso 3"); 
02ED:  MOVLW  95
02EE:  BSF    03.6
02EF:  MOVWF  0D
02F0:  MOVLW  00
02F1:  MOVWF  0F
02F2:  BCF    03.6
02F3:  CALL   205
.................... puts("proceso 3"); 
02F4:  MOVLW  9A
02F5:  BSF    03.6
02F6:  MOVWF  0D
02F7:  MOVLW  00
02F8:  MOVWF  0F
02F9:  BCF    03.6
02FA:  CALL   260
02FB:  MOVLW  0D
02FC:  BTFSS  0C.4
02FD:  GOTO   2FC
02FE:  MOVWF  19
02FF:  MOVLW  0A
0300:  BTFSS  0C.4
0301:  GOTO   300
0302:  MOVWF  19
.................... rb3=1; 
0303:  BSF    06.3
.................... } 
0304:  RETURN
.................... //proceso4: 
.................... void do_proceso4(){ 
.................... lcd_putc("\f"); 
0305:  MOVLW  9F
0306:  BSF    03.6
0307:  MOVWF  0D
0308:  MOVLW  00
0309:  MOVWF  0F
030A:  BCF    03.6
030B:  CALL   205
.................... lcd_putc("proceso 4"); 
030C:  MOVLW  A0
030D:  BSF    03.6
030E:  MOVWF  0D
030F:  MOVLW  00
0310:  MOVWF  0F
0311:  BCF    03.6
0312:  CALL   205
.................... puts("proceso 4"); 
0313:  MOVLW  A5
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  MOVLW  00
0317:  MOVWF  0F
0318:  BCF    03.6
0319:  CALL   260
031A:  MOVLW  0D
031B:  BTFSS  0C.4
031C:  GOTO   31B
031D:  MOVWF  19
031E:  MOVLW  0A
031F:  BTFSS  0C.4
0320:  GOTO   31F
0321:  MOVWF  19
.................... rb4=1; 
0322:  BSF    06.4
.................... } 
0323:  RETURN
.................... //proceso11: 
.................... void do_proceso11(){ 
.................... for (contador1=1;contador1<=4;contador1++){ 
*
089C:  MOVLW  01
089D:  MOVWF  2A
089E:  MOVF   2A,W
089F:  SUBLW  04
08A0:  BTFSS  03.0
08A1:  GOTO   10D
....................              copia1=contador1; 
08A2:  MOVF   2A,W
08A3:  MOVWF  2F
....................              if(quantum*contador1<time1){ 
08A4:  MOVF   3C,W
08A5:  MOVWF  3E
08A6:  MOVF   3B,W
08A7:  MOVWF  3D
08A8:  CLRF   40
08A9:  MOVF   2A,W
08AA:  MOVWF  3F
08AB:  BCF    0A.3
08AC:  CALL   24B
08AD:  BSF    0A.3
08AE:  MOVF   79,W
08AF:  MOVWF  3E
08B0:  MOVF   78,W
08B1:  MOVWF  3D
08B2:  MOVF   3E,W
08B3:  SUBWF  34,W
08B4:  BTFSS  03.0
08B5:  GOTO   0F9
08B6:  BTFSS  03.2
08B7:  GOTO   0BC
08B8:  MOVF   33,W
08B9:  SUBWF  3D,W
08BA:  BTFSC  03.0
08BB:  GOTO   0F9
....................                 rb1=1; 
08BC:  BSF    06.1
....................                 delay_ms(quantum); 
08BD:  MOVF   3C,W
08BE:  MOVWF  3D
08BF:  INCF   3D,F
08C0:  DECF   3D,F
08C1:  BTFSC  03.2
08C2:  GOTO   0CF
08C3:  CLRF   27
08C4:  BTFSC  0B.7
08C5:  BSF    27.7
08C6:  BCF    0B.7
08C7:  MOVLW  FF
08C8:  MOVWF  4E
08C9:  BCF    0A.3
08CA:  CALL   04A
08CB:  BSF    0A.3
08CC:  BTFSC  27.7
08CD:  BSF    0B.7
08CE:  GOTO   0C0
08CF:  CLRF   27
08D0:  BTFSC  0B.7
08D1:  BSF    27.7
08D2:  BCF    0B.7
08D3:  MOVF   3B,W
08D4:  MOVWF  4E
08D5:  BCF    0A.3
08D6:  CALL   04A
08D7:  BSF    0A.3
08D8:  BTFSC  27.7
08D9:  BSF    0B.7
....................                 rb1=0; 
08DA:  BCF    06.1
....................                 delay_ms(quantum); 
08DB:  MOVF   3C,W
08DC:  MOVWF  3D
08DD:  INCF   3D,F
08DE:  DECF   3D,F
08DF:  BTFSC  03.2
08E0:  GOTO   0ED
08E1:  CLRF   27
08E2:  BTFSC  0B.7
08E3:  BSF    27.7
08E4:  BCF    0B.7
08E5:  MOVLW  FF
08E6:  MOVWF  4E
08E7:  BCF    0A.3
08E8:  CALL   04A
08E9:  BSF    0A.3
08EA:  BTFSC  27.7
08EB:  BSF    0B.7
08EC:  GOTO   0DE
08ED:  CLRF   27
08EE:  BTFSC  0B.7
08EF:  BSF    27.7
08F0:  BCF    0B.7
08F1:  MOVF   3B,W
08F2:  MOVWF  4E
08F3:  BCF    0A.3
08F4:  CALL   04A
08F5:  BSF    0A.3
08F6:  BTFSC  27.7
08F7:  BSF    0B.7
....................                                         } 
....................              else { 
08F8:  GOTO   0FC
....................                     do_proceso1(); 
08F9:  BCF    0A.3
08FA:  CALL   2A8
08FB:  BSF    0A.3
....................                    }   
....................              if(tecla_pulsada=='2'){ 
08FC:  MOVF   28,W
08FD:  SUBLW  32
08FE:  BTFSS  03.2
08FF:  GOTO   101
....................                    break; 
0900:  GOTO   10D
....................                   } 
....................              if(tecla_pulsada=='3'){ 
0901:  MOVF   28,W
0902:  SUBLW  33
0903:  BTFSS  03.2
0904:  GOTO   106
....................                    break; 
0905:  GOTO   10D
....................                   } 
....................              if(tecla_pulsada=='4'){ 
0906:  MOVF   28,W
0907:  SUBLW  34
0908:  BTFSS  03.2
0909:  GOTO   10B
....................                    break; 
090A:  GOTO   10D
....................                   } 
....................   
....................          } 
090B:  INCF   2A,F
090C:  GOTO   09E
....................   
....................      if(tecla_pulsada=='2'){ 
090D:  MOVF   28,W
090E:  SUBLW  32
090F:  BTFSS  03.2
0910:  GOTO   4BA
....................                for (contador2=1;contador2<=8;contador2++){ 
0911:  MOVLW  01
0912:  MOVWF  2B
0913:  MOVF   2B,W
0914:  SUBLW  08
0915:  BTFSS  03.0
0916:  GOTO   1E4
....................                     copia2=contador2; 
0917:  MOVF   2B,W
0918:  MOVWF  30
....................                     if(quantum*contador1<=time1){ 
0919:  MOVF   3C,W
091A:  MOVWF  3E
091B:  MOVF   3B,W
091C:  MOVWF  3D
091D:  CLRF   40
091E:  MOVF   2A,W
091F:  MOVWF  3F
0920:  BCF    0A.3
0921:  CALL   24B
0922:  BSF    0A.3
0923:  MOVF   79,W
0924:  MOVWF  3E
0925:  MOVF   78,W
0926:  MOVWF  3D
0927:  MOVF   3E,W
0928:  SUBWF  34,W
0929:  BTFSS  03.0
092A:  GOTO   170
092B:  BTFSS  03.2
092C:  GOTO   131
092D:  MOVF   3D,W
092E:  SUBWF  33,W
092F:  BTFSS  03.0
0930:  GOTO   170
....................                       rb2=1; 
0931:  BSF    06.2
....................                       rb1=1; 
0932:  BSF    06.1
....................                       delay_ms(quantum); 
0933:  MOVF   3C,W
0934:  MOVWF  3D
0935:  INCF   3D,F
0936:  DECF   3D,F
0937:  BTFSC  03.2
0938:  GOTO   145
0939:  CLRF   27
093A:  BTFSC  0B.7
093B:  BSF    27.7
093C:  BCF    0B.7
093D:  MOVLW  FF
093E:  MOVWF  4E
093F:  BCF    0A.3
0940:  CALL   04A
0941:  BSF    0A.3
0942:  BTFSC  27.7
0943:  BSF    0B.7
0944:  GOTO   136
0945:  CLRF   27
0946:  BTFSC  0B.7
0947:  BSF    27.7
0948:  BCF    0B.7
0949:  MOVF   3B,W
094A:  MOVWF  4E
094B:  BCF    0A.3
094C:  CALL   04A
094D:  BSF    0A.3
094E:  BTFSC  27.7
094F:  BSF    0B.7
....................                       rb1=0; 
0950:  BCF    06.1
....................                       rb2=0; 
0951:  BCF    06.2
....................                       delay_ms(quantum); 
0952:  MOVF   3C,W
0953:  MOVWF  3D
0954:  INCF   3D,F
0955:  DECF   3D,F
0956:  BTFSC  03.2
0957:  GOTO   164
0958:  CLRF   27
0959:  BTFSC  0B.7
095A:  BSF    27.7
095B:  BCF    0B.7
095C:  MOVLW  FF
095D:  MOVWF  4E
095E:  BCF    0A.3
095F:  CALL   04A
0960:  BSF    0A.3
0961:  BTFSC  27.7
0962:  BSF    0B.7
0963:  GOTO   155
0964:  CLRF   27
0965:  BTFSC  0B.7
0966:  BSF    27.7
0967:  BCF    0B.7
0968:  MOVF   3B,W
0969:  MOVWF  4E
096A:  BCF    0A.3
096B:  CALL   04A
096C:  BSF    0A.3
096D:  BTFSC  27.7
096E:  BSF    0B.7
....................                                                } 
....................                                                 
....................                    else  { 
096F:  GOTO   1C4
....................  
....................                           if(quantum*contador2<time2){ 
0970:  MOVF   3C,W
0971:  MOVWF  3E
0972:  MOVF   3B,W
0973:  MOVWF  3D
0974:  CLRF   40
0975:  MOVF   2B,W
0976:  MOVWF  3F
0977:  BCF    0A.3
0978:  CALL   24B
0979:  BSF    0A.3
097A:  MOVF   79,W
097B:  MOVWF  3E
097C:  MOVF   78,W
097D:  MOVWF  3D
097E:  MOVF   3E,W
097F:  SUBWF  36,W
0980:  BTFSS  03.0
0981:  GOTO   1C4
0982:  BTFSS  03.2
0983:  GOTO   188
0984:  MOVF   35,W
0985:  SUBWF  3D,W
0986:  BTFSC  03.0
0987:  GOTO   1C4
....................                                rb2=1; 
0988:  BSF    06.2
....................                                delay_ms(quantum); 
0989:  MOVF   3C,W
098A:  MOVWF  3D
098B:  INCF   3D,F
098C:  DECF   3D,F
098D:  BTFSC  03.2
098E:  GOTO   19B
098F:  CLRF   27
0990:  BTFSC  0B.7
0991:  BSF    27.7
0992:  BCF    0B.7
0993:  MOVLW  FF
0994:  MOVWF  4E
0995:  BCF    0A.3
0996:  CALL   04A
0997:  BSF    0A.3
0998:  BTFSC  27.7
0999:  BSF    0B.7
099A:  GOTO   18C
099B:  CLRF   27
099C:  BTFSC  0B.7
099D:  BSF    27.7
099E:  BCF    0B.7
099F:  MOVF   3B,W
09A0:  MOVWF  4E
09A1:  BCF    0A.3
09A2:  CALL   04A
09A3:  BSF    0A.3
09A4:  BTFSC  27.7
09A5:  BSF    0B.7
....................                                rb2=0; 
09A6:  BCF    06.2
....................                                delay_ms(quantum); 
09A7:  MOVF   3C,W
09A8:  MOVWF  3D
09A9:  INCF   3D,F
09AA:  DECF   3D,F
09AB:  BTFSC  03.2
09AC:  GOTO   1B9
09AD:  CLRF   27
09AE:  BTFSC  0B.7
09AF:  BSF    27.7
09B0:  BCF    0B.7
09B1:  MOVLW  FF
09B2:  MOVWF  4E
09B3:  BCF    0A.3
09B4:  CALL   04A
09B5:  BSF    0A.3
09B6:  BTFSC  27.7
09B7:  BSF    0B.7
09B8:  GOTO   1AA
09B9:  CLRF   27
09BA:  BTFSC  0B.7
09BB:  BSF    27.7
09BC:  BCF    0B.7
09BD:  MOVF   3B,W
09BE:  MOVWF  4E
09BF:  BCF    0A.3
09C0:  CALL   04A
09C1:  BSF    0A.3
09C2:  BTFSC  27.7
09C3:  BSF    0B.7
....................                                                      }  
....................                          } 
....................  
....................                  if(contador1==4 && copia1<4) do_proceso1(); 
09C4:  MOVF   2A,W
09C5:  SUBLW  04
09C6:  BTFSS  03.2
09C7:  GOTO   1D0
09C8:  MOVF   2F,W
09C9:  SUBLW  03
09CA:  BTFSS  03.0
09CB:  GOTO   1D0
09CC:  BCF    0A.3
09CD:  CALL   2A8
09CE:  BSF    0A.3
....................                  else{ if(contador2==8) do_proceso2();} 
09CF:  GOTO   1D7
09D0:  MOVF   2B,W
09D1:  SUBLW  08
09D2:  BTFSS  03.2
09D3:  GOTO   1D7
09D4:  BCF    0A.3
09D5:  CALL   2C7
09D6:  BSF    0A.3
....................           
....................                  if(tecla_pulsada=='3'){ 
09D7:  MOVF   28,W
09D8:  SUBLW  33
09D9:  BTFSS  03.2
09DA:  GOTO   1DC
....................                       break; 
09DB:  GOTO   1E4
....................                   } 
....................                  if(tecla_pulsada=='4'){ 
09DC:  MOVF   28,W
09DD:  SUBLW  34
09DE:  BTFSS  03.2
09DF:  GOTO   1E1
....................                       break; 
09E0:  GOTO   1E4
....................                   } 
....................                   contador1++; 
09E1:  INCF   2A,F
....................                    
....................               } 
09E2:  INCF   2B,F
09E3:  GOTO   113
....................  
....................               if(tecla_pulsada=='3'){ 
09E4:  MOVF   28,W
09E5:  SUBLW  33
09E6:  BTFSS  03.2
09E7:  GOTO   4BA
....................                       for (contador3=1;contador3<=12;contador3++){ 
09E8:  MOVLW  01
09E9:  MOVWF  2C
09EA:  MOVF   2C,W
09EB:  SUBLW  0C
09EC:  BTFSS  03.0
09ED:  GOTO   31E
....................                     copia3=contador3; 
09EE:  MOVF   2C,W
09EF:  MOVWF  31
....................                     if(quantum*contador1<time1){ 
09F0:  MOVF   3C,W
09F1:  MOVWF  3E
09F2:  MOVF   3B,W
09F3:  MOVWF  3D
09F4:  CLRF   40
09F5:  MOVF   2A,W
09F6:  MOVWF  3F
09F7:  BCF    0A.3
09F8:  CALL   24B
09F9:  BSF    0A.3
09FA:  MOVF   79,W
09FB:  MOVWF  3E
09FC:  MOVF   78,W
09FD:  MOVWF  3D
09FE:  MOVF   3E,W
09FF:  SUBWF  34,W
0A00:  BTFSS  03.0
0A01:  GOTO   249
0A02:  BTFSS  03.2
0A03:  GOTO   208
0A04:  MOVF   33,W
0A05:  SUBWF  3D,W
0A06:  BTFSC  03.0
0A07:  GOTO   249
....................                       rb3=1; 
0A08:  BSF    06.3
....................                       rb2=1; 
0A09:  BSF    06.2
....................                       rb1=1; 
0A0A:  BSF    06.1
....................                       delay_ms(quantum); 
0A0B:  MOVF   3C,W
0A0C:  MOVWF  3D
0A0D:  INCF   3D,F
0A0E:  DECF   3D,F
0A0F:  BTFSC  03.2
0A10:  GOTO   21D
0A11:  CLRF   27
0A12:  BTFSC  0B.7
0A13:  BSF    27.7
0A14:  BCF    0B.7
0A15:  MOVLW  FF
0A16:  MOVWF  4E
0A17:  BCF    0A.3
0A18:  CALL   04A
0A19:  BSF    0A.3
0A1A:  BTFSC  27.7
0A1B:  BSF    0B.7
0A1C:  GOTO   20E
0A1D:  CLRF   27
0A1E:  BTFSC  0B.7
0A1F:  BSF    27.7
0A20:  BCF    0B.7
0A21:  MOVF   3B,W
0A22:  MOVWF  4E
0A23:  BCF    0A.3
0A24:  CALL   04A
0A25:  BSF    0A.3
0A26:  BTFSC  27.7
0A27:  BSF    0B.7
....................                       rb3=1; 
0A28:  BSF    06.3
....................                       rb1=0; 
0A29:  BCF    06.1
....................                       rb2=0; 
0A2A:  BCF    06.2
....................                       delay_ms(quantum); 
0A2B:  MOVF   3C,W
0A2C:  MOVWF  3D
0A2D:  INCF   3D,F
0A2E:  DECF   3D,F
0A2F:  BTFSC  03.2
0A30:  GOTO   23D
0A31:  CLRF   27
0A32:  BTFSC  0B.7
0A33:  BSF    27.7
0A34:  BCF    0B.7
0A35:  MOVLW  FF
0A36:  MOVWF  4E
0A37:  BCF    0A.3
0A38:  CALL   04A
0A39:  BSF    0A.3
0A3A:  BTFSC  27.7
0A3B:  BSF    0B.7
0A3C:  GOTO   22E
0A3D:  CLRF   27
0A3E:  BTFSC  0B.7
0A3F:  BSF    27.7
0A40:  BCF    0B.7
0A41:  MOVF   3B,W
0A42:  MOVWF  4E
0A43:  BCF    0A.3
0A44:  CALL   04A
0A45:  BSF    0A.3
0A46:  BTFSC  27.7
0A47:  BSF    0B.7
....................                                                } 
....................                                                 
....................                    else  { 
0A48:  GOTO   2F4
....................                     
....................                           if(quantum*contador2<time2){ 
0A49:  MOVF   3C,W
0A4A:  MOVWF  3E
0A4B:  MOVF   3B,W
0A4C:  MOVWF  3D
0A4D:  CLRF   40
0A4E:  MOVF   2B,W
0A4F:  MOVWF  3F
0A50:  BCF    0A.3
0A51:  CALL   24B
0A52:  BSF    0A.3
0A53:  MOVF   79,W
0A54:  MOVWF  3E
0A55:  MOVF   78,W
0A56:  MOVWF  3D
0A57:  MOVF   3E,W
0A58:  SUBWF  36,W
0A59:  BTFSS  03.0
0A5A:  GOTO   2A0
0A5B:  BTFSS  03.2
0A5C:  GOTO   261
0A5D:  MOVF   35,W
0A5E:  SUBWF  3D,W
0A5F:  BTFSC  03.0
0A60:  GOTO   2A0
....................                                rb3=1; 
0A61:  BSF    06.3
....................                                rb2=1; 
0A62:  BSF    06.2
....................                                delay_ms(quantum); 
0A63:  MOVF   3C,W
0A64:  MOVWF  3D
0A65:  INCF   3D,F
0A66:  DECF   3D,F
0A67:  BTFSC  03.2
0A68:  GOTO   275
0A69:  CLRF   27
0A6A:  BTFSC  0B.7
0A6B:  BSF    27.7
0A6C:  BCF    0B.7
0A6D:  MOVLW  FF
0A6E:  MOVWF  4E
0A6F:  BCF    0A.3
0A70:  CALL   04A
0A71:  BSF    0A.3
0A72:  BTFSC  27.7
0A73:  BSF    0B.7
0A74:  GOTO   266
0A75:  CLRF   27
0A76:  BTFSC  0B.7
0A77:  BSF    27.7
0A78:  BCF    0B.7
0A79:  MOVF   3B,W
0A7A:  MOVWF  4E
0A7B:  BCF    0A.3
0A7C:  CALL   04A
0A7D:  BSF    0A.3
0A7E:  BTFSC  27.7
0A7F:  BSF    0B.7
....................                                rb3=0; 
0A80:  BCF    06.3
....................                                rb2=0; 
0A81:  BCF    06.2
....................                                delay_ms(quantum); 
0A82:  MOVF   3C,W
0A83:  MOVWF  3D
0A84:  INCF   3D,F
0A85:  DECF   3D,F
0A86:  BTFSC  03.2
0A87:  GOTO   294
0A88:  CLRF   27
0A89:  BTFSC  0B.7
0A8A:  BSF    27.7
0A8B:  BCF    0B.7
0A8C:  MOVLW  FF
0A8D:  MOVWF  4E
0A8E:  BCF    0A.3
0A8F:  CALL   04A
0A90:  BSF    0A.3
0A91:  BTFSC  27.7
0A92:  BSF    0B.7
0A93:  GOTO   285
0A94:  CLRF   27
0A95:  BTFSC  0B.7
0A96:  BSF    27.7
0A97:  BCF    0B.7
0A98:  MOVF   3B,W
0A99:  MOVWF  4E
0A9A:  BCF    0A.3
0A9B:  CALL   04A
0A9C:  BSF    0A.3
0A9D:  BTFSC  27.7
0A9E:  BSF    0B.7
....................                                                     }  
....................                      else{ 
0A9F:  GOTO   2F4
....................                          if(quantum*contador3<time3){ 
0AA0:  MOVF   3C,W
0AA1:  MOVWF  3E
0AA2:  MOVF   3B,W
0AA3:  MOVWF  3D
0AA4:  CLRF   40
0AA5:  MOVF   2C,W
0AA6:  MOVWF  3F
0AA7:  BCF    0A.3
0AA8:  CALL   24B
0AA9:  BSF    0A.3
0AAA:  MOVF   79,W
0AAB:  MOVWF  3E
0AAC:  MOVF   78,W
0AAD:  MOVWF  3D
0AAE:  MOVF   3E,W
0AAF:  SUBWF  38,W
0AB0:  BTFSS  03.0
0AB1:  GOTO   2F4
0AB2:  BTFSS  03.2
0AB3:  GOTO   2B8
0AB4:  MOVF   37,W
0AB5:  SUBWF  3D,W
0AB6:  BTFSC  03.0
0AB7:  GOTO   2F4
....................                                rb3=1; 
0AB8:  BSF    06.3
....................                                delay_ms(quantum); 
0AB9:  MOVF   3C,W
0ABA:  MOVWF  3D
0ABB:  INCF   3D,F
0ABC:  DECF   3D,F
0ABD:  BTFSC  03.2
0ABE:  GOTO   2CB
0ABF:  CLRF   27
0AC0:  BTFSC  0B.7
0AC1:  BSF    27.7
0AC2:  BCF    0B.7
0AC3:  MOVLW  FF
0AC4:  MOVWF  4E
0AC5:  BCF    0A.3
0AC6:  CALL   04A
0AC7:  BSF    0A.3
0AC8:  BTFSC  27.7
0AC9:  BSF    0B.7
0ACA:  GOTO   2BC
0ACB:  CLRF   27
0ACC:  BTFSC  0B.7
0ACD:  BSF    27.7
0ACE:  BCF    0B.7
0ACF:  MOVF   3B,W
0AD0:  MOVWF  4E
0AD1:  BCF    0A.3
0AD2:  CALL   04A
0AD3:  BSF    0A.3
0AD4:  BTFSC  27.7
0AD5:  BSF    0B.7
....................                                rb3=0; 
0AD6:  BCF    06.3
....................                                delay_ms(quantum); 
0AD7:  MOVF   3C,W
0AD8:  MOVWF  3D
0AD9:  INCF   3D,F
0ADA:  DECF   3D,F
0ADB:  BTFSC  03.2
0ADC:  GOTO   2E9
0ADD:  CLRF   27
0ADE:  BTFSC  0B.7
0ADF:  BSF    27.7
0AE0:  BCF    0B.7
0AE1:  MOVLW  FF
0AE2:  MOVWF  4E
0AE3:  BCF    0A.3
0AE4:  CALL   04A
0AE5:  BSF    0A.3
0AE6:  BTFSC  27.7
0AE7:  BSF    0B.7
0AE8:  GOTO   2DA
0AE9:  CLRF   27
0AEA:  BTFSC  0B.7
0AEB:  BSF    27.7
0AEC:  BCF    0B.7
0AED:  MOVF   3B,W
0AEE:  MOVWF  4E
0AEF:  BCF    0A.3
0AF0:  CALL   04A
0AF1:  BSF    0A.3
0AF2:  BTFSC  27.7
0AF3:  BSF    0B.7
....................                                                      }  
....................      
....................                            } 
....................                          } 
....................  
....................                  if(contador1==4 && copia1<4) do_proceso1();                 
0AF4:  MOVF   2A,W
0AF5:  SUBLW  04
0AF6:  BTFSS  03.2
0AF7:  GOTO   2FF
0AF8:  MOVF   2F,W
0AF9:  SUBLW  03
0AFA:  BTFSS  03.0
0AFB:  GOTO   2FF
0AFC:  BCF    0A.3
0AFD:  CALL   2A8
0AFE:  BSF    0A.3
....................                  if(contador2==8 && copia2<8) do_proceso2(); 
0AFF:  MOVF   2B,W
0B00:  SUBLW  08
0B01:  BTFSS  03.2
0B02:  GOTO   30A
0B03:  MOVF   30,W
0B04:  SUBLW  07
0B05:  BTFSS  03.0
0B06:  GOTO   30A
0B07:  BCF    0A.3
0B08:  CALL   2C7
0B09:  BSF    0A.3
....................                  if(contador3==12 && copia3<12)do_proceso3(); 
0B0A:  MOVF   2C,W
0B0B:  SUBLW  0C
0B0C:  BTFSS  03.2
0B0D:  GOTO   315
0B0E:  MOVF   31,W
0B0F:  SUBLW  0B
0B10:  BTFSS  03.0
0B11:  GOTO   315
0B12:  BCF    0A.3
0B13:  CALL   2E6
0B14:  BSF    0A.3
....................           
....................         
....................                  if(tecla_pulsada=='4'){ 
0B15:  MOVF   28,W
0B16:  SUBLW  34
0B17:  BTFSS  03.2
0B18:  GOTO   31A
....................                       break; 
0B19:  GOTO   31E
....................                   } 
....................                   contador1++; 
0B1A:  INCF   2A,F
....................                   contador2++; 
0B1B:  INCF   2B,F
....................                  
....................               } 
0B1C:  INCF   2C,F
0B1D:  GOTO   1EA
....................                    if(tecla_pulsada=='4'){ 
0B1E:  MOVF   28,W
0B1F:  SUBLW  34
0B20:  BTFSS  03.2
0B21:  GOTO   4BA
....................                      for (contador4=1;contador4<=16;contador4++){ 
0B22:  MOVLW  01
0B23:  MOVWF  2D
0B24:  MOVF   2D,W
0B25:  SUBLW  10
0B26:  BTFSS  03.0
0B27:  GOTO   4BA
....................                     copia4=contador4; 
0B28:  MOVF   2D,W
0B29:  MOVWF  32
....................                     if(quantum*contador1<time1){ 
0B2A:  MOVF   3C,W
0B2B:  MOVWF  3E
0B2C:  MOVF   3B,W
0B2D:  MOVWF  3D
0B2E:  CLRF   40
0B2F:  MOVF   2A,W
0B30:  MOVWF  3F
0B31:  BCF    0A.3
0B32:  CALL   24B
0B33:  BSF    0A.3
0B34:  MOVF   79,W
0B35:  MOVWF  3E
0B36:  MOVF   78,W
0B37:  MOVWF  3D
0B38:  MOVF   3E,W
0B39:  SUBWF  34,W
0B3A:  BTFSS  03.0
0B3B:  GOTO   385
0B3C:  BTFSS  03.2
0B3D:  GOTO   342
0B3E:  MOVF   33,W
0B3F:  SUBWF  3D,W
0B40:  BTFSC  03.0
0B41:  GOTO   385
....................                       rb4=1; 
0B42:  BSF    06.4
....................                       rb3=1; 
0B43:  BSF    06.3
....................                       rb2=1; 
0B44:  BSF    06.2
....................                       rb1=1; 
0B45:  BSF    06.1
....................                       delay_ms(quantum); 
0B46:  MOVF   3C,W
0B47:  MOVWF  3D
0B48:  INCF   3D,F
0B49:  DECF   3D,F
0B4A:  BTFSC  03.2
0B4B:  GOTO   358
0B4C:  CLRF   27
0B4D:  BTFSC  0B.7
0B4E:  BSF    27.7
0B4F:  BCF    0B.7
0B50:  MOVLW  FF
0B51:  MOVWF  4E
0B52:  BCF    0A.3
0B53:  CALL   04A
0B54:  BSF    0A.3
0B55:  BTFSC  27.7
0B56:  BSF    0B.7
0B57:  GOTO   349
0B58:  CLRF   27
0B59:  BTFSC  0B.7
0B5A:  BSF    27.7
0B5B:  BCF    0B.7
0B5C:  MOVF   3B,W
0B5D:  MOVWF  4E
0B5E:  BCF    0A.3
0B5F:  CALL   04A
0B60:  BSF    0A.3
0B61:  BTFSC  27.7
0B62:  BSF    0B.7
....................                       rb4=0; 
0B63:  BCF    06.4
....................                       rb3=1; 
0B64:  BSF    06.3
....................                       rb2=0; 
0B65:  BCF    06.2
....................                       rb1=0; 
0B66:  BCF    06.1
....................                       delay_ms(quantum); 
0B67:  MOVF   3C,W
0B68:  MOVWF  3D
0B69:  INCF   3D,F
0B6A:  DECF   3D,F
0B6B:  BTFSC  03.2
0B6C:  GOTO   379
0B6D:  CLRF   27
0B6E:  BTFSC  0B.7
0B6F:  BSF    27.7
0B70:  BCF    0B.7
0B71:  MOVLW  FF
0B72:  MOVWF  4E
0B73:  BCF    0A.3
0B74:  CALL   04A
0B75:  BSF    0A.3
0B76:  BTFSC  27.7
0B77:  BSF    0B.7
0B78:  GOTO   36A
0B79:  CLRF   27
0B7A:  BTFSC  0B.7
0B7B:  BSF    27.7
0B7C:  BCF    0B.7
0B7D:  MOVF   3B,W
0B7E:  MOVWF  4E
0B7F:  BCF    0A.3
0B80:  CALL   04A
0B81:  BSF    0A.3
0B82:  BTFSC  27.7
0B83:  BSF    0B.7
....................                                                } 
....................                                                 
....................                    else  { 
0B84:  GOTO   489
....................                     
....................                           if(quantum*contador2<time2){ 
0B85:  MOVF   3C,W
0B86:  MOVWF  3E
0B87:  MOVF   3B,W
0B88:  MOVWF  3D
0B89:  CLRF   40
0B8A:  MOVF   2B,W
0B8B:  MOVWF  3F
0B8C:  BCF    0A.3
0B8D:  CALL   24B
0B8E:  BSF    0A.3
0B8F:  MOVF   79,W
0B90:  MOVWF  3E
0B91:  MOVF   78,W
0B92:  MOVWF  3D
0B93:  MOVF   3E,W
0B94:  SUBWF  36,W
0B95:  BTFSS  03.0
0B96:  GOTO   3DE
0B97:  BTFSS  03.2
0B98:  GOTO   39D
0B99:  MOVF   35,W
0B9A:  SUBWF  3D,W
0B9B:  BTFSC  03.0
0B9C:  GOTO   3DE
....................                                rb4=1; 
0B9D:  BSF    06.4
....................                                rb3=1; 
0B9E:  BSF    06.3
....................                                rb2=1; 
0B9F:  BSF    06.2
....................                                delay_ms(quantum); 
0BA0:  MOVF   3C,W
0BA1:  MOVWF  3D
0BA2:  INCF   3D,F
0BA3:  DECF   3D,F
0BA4:  BTFSC  03.2
0BA5:  GOTO   3B2
0BA6:  CLRF   27
0BA7:  BTFSC  0B.7
0BA8:  BSF    27.7
0BA9:  BCF    0B.7
0BAA:  MOVLW  FF
0BAB:  MOVWF  4E
0BAC:  BCF    0A.3
0BAD:  CALL   04A
0BAE:  BSF    0A.3
0BAF:  BTFSC  27.7
0BB0:  BSF    0B.7
0BB1:  GOTO   3A3
0BB2:  CLRF   27
0BB3:  BTFSC  0B.7
0BB4:  BSF    27.7
0BB5:  BCF    0B.7
0BB6:  MOVF   3B,W
0BB7:  MOVWF  4E
0BB8:  BCF    0A.3
0BB9:  CALL   04A
0BBA:  BSF    0A.3
0BBB:  BTFSC  27.7
0BBC:  BSF    0B.7
....................                                rb4=0; 
0BBD:  BCF    06.4
....................                                rb3=0; 
0BBE:  BCF    06.3
....................                                rb2=0; 
0BBF:  BCF    06.2
....................                                delay_ms(quantum); 
0BC0:  MOVF   3C,W
0BC1:  MOVWF  3D
0BC2:  INCF   3D,F
0BC3:  DECF   3D,F
0BC4:  BTFSC  03.2
0BC5:  GOTO   3D2
0BC6:  CLRF   27
0BC7:  BTFSC  0B.7
0BC8:  BSF    27.7
0BC9:  BCF    0B.7
0BCA:  MOVLW  FF
0BCB:  MOVWF  4E
0BCC:  BCF    0A.3
0BCD:  CALL   04A
0BCE:  BSF    0A.3
0BCF:  BTFSC  27.7
0BD0:  BSF    0B.7
0BD1:  GOTO   3C3
0BD2:  CLRF   27
0BD3:  BTFSC  0B.7
0BD4:  BSF    27.7
0BD5:  BCF    0B.7
0BD6:  MOVF   3B,W
0BD7:  MOVWF  4E
0BD8:  BCF    0A.3
0BD9:  CALL   04A
0BDA:  BSF    0A.3
0BDB:  BTFSC  27.7
0BDC:  BSF    0B.7
....................                                                     }  
....................                      else{ 
0BDD:  GOTO   489
....................                          if(quantum*contador3<time3){ 
0BDE:  MOVF   3C,W
0BDF:  MOVWF  3E
0BE0:  MOVF   3B,W
0BE1:  MOVWF  3D
0BE2:  CLRF   40
0BE3:  MOVF   2C,W
0BE4:  MOVWF  3F
0BE5:  BCF    0A.3
0BE6:  CALL   24B
0BE7:  BSF    0A.3
0BE8:  MOVF   79,W
0BE9:  MOVWF  3E
0BEA:  MOVF   78,W
0BEB:  MOVWF  3D
0BEC:  MOVF   3E,W
0BED:  SUBWF  38,W
0BEE:  BTFSS  03.0
0BEF:  GOTO   435
0BF0:  BTFSS  03.2
0BF1:  GOTO   3F6
0BF2:  MOVF   37,W
0BF3:  SUBWF  3D,W
0BF4:  BTFSC  03.0
0BF5:  GOTO   435
....................                                rb4=1; 
0BF6:  BSF    06.4
....................                                rb3=1; 
0BF7:  BSF    06.3
....................                                delay_ms(quantum); 
0BF8:  MOVF   3C,W
0BF9:  MOVWF  3D
0BFA:  INCF   3D,F
0BFB:  DECF   3D,F
0BFC:  BTFSC  03.2
0BFD:  GOTO   40A
0BFE:  CLRF   27
0BFF:  BTFSC  0B.7
0C00:  BSF    27.7
0C01:  BCF    0B.7
0C02:  MOVLW  FF
0C03:  MOVWF  4E
0C04:  BCF    0A.3
0C05:  CALL   04A
0C06:  BSF    0A.3
0C07:  BTFSC  27.7
0C08:  BSF    0B.7
0C09:  GOTO   3FB
0C0A:  CLRF   27
0C0B:  BTFSC  0B.7
0C0C:  BSF    27.7
0C0D:  BCF    0B.7
0C0E:  MOVF   3B,W
0C0F:  MOVWF  4E
0C10:  BCF    0A.3
0C11:  CALL   04A
0C12:  BSF    0A.3
0C13:  BTFSC  27.7
0C14:  BSF    0B.7
....................                                rb4=0; 
0C15:  BCF    06.4
....................                                rb3=0; 
0C16:  BCF    06.3
....................                                delay_ms(quantum); 
0C17:  MOVF   3C,W
0C18:  MOVWF  3D
0C19:  INCF   3D,F
0C1A:  DECF   3D,F
0C1B:  BTFSC  03.2
0C1C:  GOTO   429
0C1D:  CLRF   27
0C1E:  BTFSC  0B.7
0C1F:  BSF    27.7
0C20:  BCF    0B.7
0C21:  MOVLW  FF
0C22:  MOVWF  4E
0C23:  BCF    0A.3
0C24:  CALL   04A
0C25:  BSF    0A.3
0C26:  BTFSC  27.7
0C27:  BSF    0B.7
0C28:  GOTO   41A
0C29:  CLRF   27
0C2A:  BTFSC  0B.7
0C2B:  BSF    27.7
0C2C:  BCF    0B.7
0C2D:  MOVF   3B,W
0C2E:  MOVWF  4E
0C2F:  BCF    0A.3
0C30:  CALL   04A
0C31:  BSF    0A.3
0C32:  BTFSC  27.7
0C33:  BSF    0B.7
....................                                                      }  
....................                            else { 
0C34:  GOTO   489
....................                                    if(quantum*contador4<time4){ 
0C35:  MOVF   3C,W
0C36:  MOVWF  3E
0C37:  MOVF   3B,W
0C38:  MOVWF  3D
0C39:  CLRF   40
0C3A:  MOVF   2D,W
0C3B:  MOVWF  3F
0C3C:  BCF    0A.3
0C3D:  CALL   24B
0C3E:  BSF    0A.3
0C3F:  MOVF   79,W
0C40:  MOVWF  3E
0C41:  MOVF   78,W
0C42:  MOVWF  3D
0C43:  MOVF   3E,W
0C44:  SUBWF  3A,W
0C45:  BTFSS  03.0
0C46:  GOTO   489
0C47:  BTFSS  03.2
0C48:  GOTO   44D
0C49:  MOVF   39,W
0C4A:  SUBWF  3D,W
0C4B:  BTFSC  03.0
0C4C:  GOTO   489
....................                                      rb4=1; 
0C4D:  BSF    06.4
....................                                      delay_ms(quantum); 
0C4E:  MOVF   3C,W
0C4F:  MOVWF  3D
0C50:  INCF   3D,F
0C51:  DECF   3D,F
0C52:  BTFSC  03.2
0C53:  GOTO   460
0C54:  CLRF   27
0C55:  BTFSC  0B.7
0C56:  BSF    27.7
0C57:  BCF    0B.7
0C58:  MOVLW  FF
0C59:  MOVWF  4E
0C5A:  BCF    0A.3
0C5B:  CALL   04A
0C5C:  BSF    0A.3
0C5D:  BTFSC  27.7
0C5E:  BSF    0B.7
0C5F:  GOTO   451
0C60:  CLRF   27
0C61:  BTFSC  0B.7
0C62:  BSF    27.7
0C63:  BCF    0B.7
0C64:  MOVF   3B,W
0C65:  MOVWF  4E
0C66:  BCF    0A.3
0C67:  CALL   04A
0C68:  BSF    0A.3
0C69:  BTFSC  27.7
0C6A:  BSF    0B.7
....................                                      rb4=0; 
0C6B:  BCF    06.4
....................                                     delay_ms(quantum); 
0C6C:  MOVF   3C,W
0C6D:  MOVWF  3D
0C6E:  INCF   3D,F
0C6F:  DECF   3D,F
0C70:  BTFSC  03.2
0C71:  GOTO   47E
0C72:  CLRF   27
0C73:  BTFSC  0B.7
0C74:  BSF    27.7
0C75:  BCF    0B.7
0C76:  MOVLW  FF
0C77:  MOVWF  4E
0C78:  BCF    0A.3
0C79:  CALL   04A
0C7A:  BSF    0A.3
0C7B:  BTFSC  27.7
0C7C:  BSF    0B.7
0C7D:  GOTO   46F
0C7E:  CLRF   27
0C7F:  BTFSC  0B.7
0C80:  BSF    27.7
0C81:  BCF    0B.7
0C82:  MOVF   3B,W
0C83:  MOVWF  4E
0C84:  BCF    0A.3
0C85:  CALL   04A
0C86:  BSF    0A.3
0C87:  BTFSC  27.7
0C88:  BSF    0B.7
....................                                 } 
....................                                                       
....................                            } 
....................                          } 
....................                        } 
....................                  if(contador1==4  &&  copia1<4) do_proceso1(); 
0C89:  MOVF   2A,W
0C8A:  SUBLW  04
0C8B:  BTFSS  03.2
0C8C:  GOTO   494
0C8D:  MOVF   2F,W
0C8E:  SUBLW  03
0C8F:  BTFSS  03.0
0C90:  GOTO   494
0C91:  BCF    0A.3
0C92:  CALL   2A8
0C93:  BSF    0A.3
....................                  if(contador2==8  &&  copia2<8) do_proceso2(); 
0C94:  MOVF   2B,W
0C95:  SUBLW  08
0C96:  BTFSS  03.2
0C97:  GOTO   49F
0C98:  MOVF   30,W
0C99:  SUBLW  07
0C9A:  BTFSS  03.0
0C9B:  GOTO   49F
0C9C:  BCF    0A.3
0C9D:  CALL   2C7
0C9E:  BSF    0A.3
....................                  if(contador3==12 &&  copia3<12) do_proceso3(); 
0C9F:  MOVF   2C,W
0CA0:  SUBLW  0C
0CA1:  BTFSS  03.2
0CA2:  GOTO   4AA
0CA3:  MOVF   31,W
0CA4:  SUBLW  0B
0CA5:  BTFSS  03.0
0CA6:  GOTO   4AA
0CA7:  BCF    0A.3
0CA8:  CALL   2E6
0CA9:  BSF    0A.3
....................                  if(contador4==16 &&  copia4<16) do_proceso4(); 
0CAA:  MOVF   2D,W
0CAB:  SUBLW  10
0CAC:  BTFSS  03.2
0CAD:  GOTO   4B5
0CAE:  MOVF   32,W
0CAF:  SUBLW  0F
0CB0:  BTFSS  03.0
0CB1:  GOTO   4B5
0CB2:  BCF    0A.3
0CB3:  CALL   305
0CB4:  BSF    0A.3
....................                   
....................                   contador1++; 
0CB5:  INCF   2A,F
....................                   contador2++; 
0CB6:  INCF   2B,F
....................                   contador3++; 
0CB7:  INCF   2C,F
....................                   } 
0CB8:  INCF   2D,F
0CB9:  GOTO   324
....................                
....................                } 
....................                    
....................    } 
....................               
....................                
....................           } 
....................            
....................           if(tecla_pulsada=='3'){ 
0CBA:  MOVF   28,W
0CBB:  SUBLW  33
0CBC:  BTFSS  03.2
0CBD:  GOTO   58C
....................                for (contador3=1;contador3<=12;contador3++){ 
0CBE:  MOVLW  01
0CBF:  MOVWF  2C
0CC0:  MOVF   2C,W
0CC1:  SUBLW  0C
0CC2:  BTFSS  03.0
0CC3:  GOTO   58C
....................                     copia3=contador3; 
0CC4:  MOVF   2C,W
0CC5:  MOVWF  31
....................                     if(quantum*contador1<time1){ 
0CC6:  MOVF   3C,W
0CC7:  MOVWF  3E
0CC8:  MOVF   3B,W
0CC9:  MOVWF  3D
0CCA:  CLRF   40
0CCB:  MOVF   2A,W
0CCC:  MOVWF  3F
0CCD:  BCF    0A.3
0CCE:  CALL   24B
0CCF:  BSF    0A.3
0CD0:  MOVF   79,W
0CD1:  MOVWF  3E
0CD2:  MOVF   78,W
0CD3:  MOVWF  3D
0CD4:  MOVF   3E,W
0CD5:  SUBWF  34,W
0CD6:  BTFSS  03.0
0CD7:  GOTO   51D
0CD8:  BTFSS  03.2
0CD9:  GOTO   4DE
0CDA:  MOVF   33,W
0CDB:  SUBWF  3D,W
0CDC:  BTFSC  03.0
0CDD:  GOTO   51D
....................                       rb3=1; 
0CDE:  BSF    06.3
....................                       rb1=1; 
0CDF:  BSF    06.1
....................                       delay_ms(quantum); 
0CE0:  MOVF   3C,W
0CE1:  MOVWF  3D
0CE2:  INCF   3D,F
0CE3:  DECF   3D,F
0CE4:  BTFSC  03.2
0CE5:  GOTO   4F2
0CE6:  CLRF   27
0CE7:  BTFSC  0B.7
0CE8:  BSF    27.7
0CE9:  BCF    0B.7
0CEA:  MOVLW  FF
0CEB:  MOVWF  4E
0CEC:  BCF    0A.3
0CED:  CALL   04A
0CEE:  BSF    0A.3
0CEF:  BTFSC  27.7
0CF0:  BSF    0B.7
0CF1:  GOTO   4E3
0CF2:  CLRF   27
0CF3:  BTFSC  0B.7
0CF4:  BSF    27.7
0CF5:  BCF    0B.7
0CF6:  MOVF   3B,W
0CF7:  MOVWF  4E
0CF8:  BCF    0A.3
0CF9:  CALL   04A
0CFA:  BSF    0A.3
0CFB:  BTFSC  27.7
0CFC:  BSF    0B.7
....................                       rb3=0; 
0CFD:  BCF    06.3
....................                       rb1=0; 
0CFE:  BCF    06.1
....................                       delay_ms(quantum); 
0CFF:  MOVF   3C,W
0D00:  MOVWF  3D
0D01:  INCF   3D,F
0D02:  DECF   3D,F
0D03:  BTFSC  03.2
0D04:  GOTO   511
0D05:  CLRF   27
0D06:  BTFSC  0B.7
0D07:  BSF    27.7
0D08:  BCF    0B.7
0D09:  MOVLW  FF
0D0A:  MOVWF  4E
0D0B:  BCF    0A.3
0D0C:  CALL   04A
0D0D:  BSF    0A.3
0D0E:  BTFSC  27.7
0D0F:  BSF    0B.7
0D10:  GOTO   502
0D11:  CLRF   27
0D12:  BTFSC  0B.7
0D13:  BSF    27.7
0D14:  BCF    0B.7
0D15:  MOVF   3B,W
0D16:  MOVWF  4E
0D17:  BCF    0A.3
0D18:  CALL   04A
0D19:  BSF    0A.3
0D1A:  BTFSC  27.7
0D1B:  BSF    0B.7
....................                                                } 
....................                                                 
....................                    else  { 
0D1C:  GOTO   571
....................                     
....................                           if(quantum*contador3<time3){ 
0D1D:  MOVF   3C,W
0D1E:  MOVWF  3E
0D1F:  MOVF   3B,W
0D20:  MOVWF  3D
0D21:  CLRF   40
0D22:  MOVF   2C,W
0D23:  MOVWF  3F
0D24:  BCF    0A.3
0D25:  CALL   24B
0D26:  BSF    0A.3
0D27:  MOVF   79,W
0D28:  MOVWF  3E
0D29:  MOVF   78,W
0D2A:  MOVWF  3D
0D2B:  MOVF   3E,W
0D2C:  SUBWF  38,W
0D2D:  BTFSS  03.0
0D2E:  GOTO   571
0D2F:  BTFSS  03.2
0D30:  GOTO   535
0D31:  MOVF   37,W
0D32:  SUBWF  3D,W
0D33:  BTFSC  03.0
0D34:  GOTO   571
....................                                rb3=1; 
0D35:  BSF    06.3
....................                                delay_ms(quantum); 
0D36:  MOVF   3C,W
0D37:  MOVWF  3D
0D38:  INCF   3D,F
0D39:  DECF   3D,F
0D3A:  BTFSC  03.2
0D3B:  GOTO   548
0D3C:  CLRF   27
0D3D:  BTFSC  0B.7
0D3E:  BSF    27.7
0D3F:  BCF    0B.7
0D40:  MOVLW  FF
0D41:  MOVWF  4E
0D42:  BCF    0A.3
0D43:  CALL   04A
0D44:  BSF    0A.3
0D45:  BTFSC  27.7
0D46:  BSF    0B.7
0D47:  GOTO   539
0D48:  CLRF   27
0D49:  BTFSC  0B.7
0D4A:  BSF    27.7
0D4B:  BCF    0B.7
0D4C:  MOVF   3B,W
0D4D:  MOVWF  4E
0D4E:  BCF    0A.3
0D4F:  CALL   04A
0D50:  BSF    0A.3
0D51:  BTFSC  27.7
0D52:  BSF    0B.7
....................                                rb3=0; 
0D53:  BCF    06.3
....................                                delay_ms(quantum); 
0D54:  MOVF   3C,W
0D55:  MOVWF  3D
0D56:  INCF   3D,F
0D57:  DECF   3D,F
0D58:  BTFSC  03.2
0D59:  GOTO   566
0D5A:  CLRF   27
0D5B:  BTFSC  0B.7
0D5C:  BSF    27.7
0D5D:  BCF    0B.7
0D5E:  MOVLW  FF
0D5F:  MOVWF  4E
0D60:  BCF    0A.3
0D61:  CALL   04A
0D62:  BSF    0A.3
0D63:  BTFSC  27.7
0D64:  BSF    0B.7
0D65:  GOTO   557
0D66:  CLRF   27
0D67:  BTFSC  0B.7
0D68:  BSF    27.7
0D69:  BCF    0B.7
0D6A:  MOVF   3B,W
0D6B:  MOVWF  4E
0D6C:  BCF    0A.3
0D6D:  CALL   04A
0D6E:  BSF    0A.3
0D6F:  BTFSC  27.7
0D70:  BSF    0B.7
....................                                                      }  
....................                          } 
....................  
....................                  if(contador1==4) do_proceso1(); 
0D71:  MOVF   2A,W
0D72:  SUBLW  04
0D73:  BTFSS  03.2
0D74:  GOTO   578
0D75:  BCF    0A.3
0D76:  CALL   2A8
0D77:  BSF    0A.3
....................                  if(contador3==12)do_proceso3(); 
0D78:  MOVF   2C,W
0D79:  SUBLW  0C
0D7A:  BTFSS  03.2
0D7B:  GOTO   57F
0D7C:  BCF    0A.3
0D7D:  CALL   2E6
0D7E:  BSF    0A.3
....................           
....................                  if(tecla_pulsada=='4'){ 
0D7F:  MOVF   28,W
0D80:  SUBLW  34
0D81:  BTFSS  03.2
0D82:  GOTO   584
....................                       break; 
0D83:  GOTO   58C
....................                   } 
....................                  if(tecla_pulsada=='2'){ 
0D84:  MOVF   28,W
0D85:  SUBLW  32
0D86:  BTFSS  03.2
0D87:  GOTO   589
....................                       break; 
0D88:  GOTO   58C
....................                   } 
....................                   contador1++; 
0D89:  INCF   2A,F
....................                    
....................                    
....................               } 
0D8A:  INCF   2C,F
0D8B:  GOTO   4C0
....................           } 
....................            
....................           if(tecla_pulsada=='4'){ 
0D8C:  MOVF   28,W
0D8D:  SUBLW  34
0D8E:  BTFSS  03.2
0D8F:  GOTO   65E
....................                for (contador4=1;contador4<=16;contador4++){ 
0D90:  MOVLW  01
0D91:  MOVWF  2D
0D92:  MOVF   2D,W
0D93:  SUBLW  10
0D94:  BTFSS  03.0
0D95:  GOTO   65E
....................                     copia4=contador4; 
0D96:  MOVF   2D,W
0D97:  MOVWF  32
....................                     if(quantum*contador1<time1){ 
0D98:  MOVF   3C,W
0D99:  MOVWF  3E
0D9A:  MOVF   3B,W
0D9B:  MOVWF  3D
0D9C:  CLRF   40
0D9D:  MOVF   2A,W
0D9E:  MOVWF  3F
0D9F:  BCF    0A.3
0DA0:  CALL   24B
0DA1:  BSF    0A.3
0DA2:  MOVF   79,W
0DA3:  MOVWF  3E
0DA4:  MOVF   78,W
0DA5:  MOVWF  3D
0DA6:  MOVF   3E,W
0DA7:  SUBWF  34,W
0DA8:  BTFSS  03.0
0DA9:  GOTO   5EF
0DAA:  BTFSS  03.2
0DAB:  GOTO   5B0
0DAC:  MOVF   33,W
0DAD:  SUBWF  3D,W
0DAE:  BTFSC  03.0
0DAF:  GOTO   5EF
....................                       rb4=1; 
0DB0:  BSF    06.4
....................                       rb1=1; 
0DB1:  BSF    06.1
....................                       delay_ms(quantum); 
0DB2:  MOVF   3C,W
0DB3:  MOVWF  3D
0DB4:  INCF   3D,F
0DB5:  DECF   3D,F
0DB6:  BTFSC  03.2
0DB7:  GOTO   5C4
0DB8:  CLRF   27
0DB9:  BTFSC  0B.7
0DBA:  BSF    27.7
0DBB:  BCF    0B.7
0DBC:  MOVLW  FF
0DBD:  MOVWF  4E
0DBE:  BCF    0A.3
0DBF:  CALL   04A
0DC0:  BSF    0A.3
0DC1:  BTFSC  27.7
0DC2:  BSF    0B.7
0DC3:  GOTO   5B5
0DC4:  CLRF   27
0DC5:  BTFSC  0B.7
0DC6:  BSF    27.7
0DC7:  BCF    0B.7
0DC8:  MOVF   3B,W
0DC9:  MOVWF  4E
0DCA:  BCF    0A.3
0DCB:  CALL   04A
0DCC:  BSF    0A.3
0DCD:  BTFSC  27.7
0DCE:  BSF    0B.7
....................                       rb4=0; 
0DCF:  BCF    06.4
....................                       rb1=0; 
0DD0:  BCF    06.1
....................                       delay_ms(quantum); 
0DD1:  MOVF   3C,W
0DD2:  MOVWF  3D
0DD3:  INCF   3D,F
0DD4:  DECF   3D,F
0DD5:  BTFSC  03.2
0DD6:  GOTO   5E3
0DD7:  CLRF   27
0DD8:  BTFSC  0B.7
0DD9:  BSF    27.7
0DDA:  BCF    0B.7
0DDB:  MOVLW  FF
0DDC:  MOVWF  4E
0DDD:  BCF    0A.3
0DDE:  CALL   04A
0DDF:  BSF    0A.3
0DE0:  BTFSC  27.7
0DE1:  BSF    0B.7
0DE2:  GOTO   5D4
0DE3:  CLRF   27
0DE4:  BTFSC  0B.7
0DE5:  BSF    27.7
0DE6:  BCF    0B.7
0DE7:  MOVF   3B,W
0DE8:  MOVWF  4E
0DE9:  BCF    0A.3
0DEA:  CALL   04A
0DEB:  BSF    0A.3
0DEC:  BTFSC  27.7
0DED:  BSF    0B.7
....................                                                } 
....................                                                 
....................                    else  { 
0DEE:  GOTO   643
....................                     
....................                           if(quantum*contador4<time4){ 
0DEF:  MOVF   3C,W
0DF0:  MOVWF  3E
0DF1:  MOVF   3B,W
0DF2:  MOVWF  3D
0DF3:  CLRF   40
0DF4:  MOVF   2D,W
0DF5:  MOVWF  3F
0DF6:  BCF    0A.3
0DF7:  CALL   24B
0DF8:  BSF    0A.3
0DF9:  MOVF   79,W
0DFA:  MOVWF  3E
0DFB:  MOVF   78,W
0DFC:  MOVWF  3D
0DFD:  MOVF   3E,W
0DFE:  SUBWF  3A,W
0DFF:  BTFSS  03.0
0E00:  GOTO   643
0E01:  BTFSS  03.2
0E02:  GOTO   607
0E03:  MOVF   39,W
0E04:  SUBWF  3D,W
0E05:  BTFSC  03.0
0E06:  GOTO   643
....................                                rb4=1; 
0E07:  BSF    06.4
....................                                delay_ms(quantum); 
0E08:  MOVF   3C,W
0E09:  MOVWF  3D
0E0A:  INCF   3D,F
0E0B:  DECF   3D,F
0E0C:  BTFSC  03.2
0E0D:  GOTO   61A
0E0E:  CLRF   27
0E0F:  BTFSC  0B.7
0E10:  BSF    27.7
0E11:  BCF    0B.7
0E12:  MOVLW  FF
0E13:  MOVWF  4E
0E14:  BCF    0A.3
0E15:  CALL   04A
0E16:  BSF    0A.3
0E17:  BTFSC  27.7
0E18:  BSF    0B.7
0E19:  GOTO   60B
0E1A:  CLRF   27
0E1B:  BTFSC  0B.7
0E1C:  BSF    27.7
0E1D:  BCF    0B.7
0E1E:  MOVF   3B,W
0E1F:  MOVWF  4E
0E20:  BCF    0A.3
0E21:  CALL   04A
0E22:  BSF    0A.3
0E23:  BTFSC  27.7
0E24:  BSF    0B.7
....................                                rb4=0; 
0E25:  BCF    06.4
....................                                delay_ms(quantum); 
0E26:  MOVF   3C,W
0E27:  MOVWF  3D
0E28:  INCF   3D,F
0E29:  DECF   3D,F
0E2A:  BTFSC  03.2
0E2B:  GOTO   638
0E2C:  CLRF   27
0E2D:  BTFSC  0B.7
0E2E:  BSF    27.7
0E2F:  BCF    0B.7
0E30:  MOVLW  FF
0E31:  MOVWF  4E
0E32:  BCF    0A.3
0E33:  CALL   04A
0E34:  BSF    0A.3
0E35:  BTFSC  27.7
0E36:  BSF    0B.7
0E37:  GOTO   629
0E38:  CLRF   27
0E39:  BTFSC  0B.7
0E3A:  BSF    27.7
0E3B:  BCF    0B.7
0E3C:  MOVF   3B,W
0E3D:  MOVWF  4E
0E3E:  BCF    0A.3
0E3F:  CALL   04A
0E40:  BSF    0A.3
0E41:  BTFSC  27.7
0E42:  BSF    0B.7
....................                                                      }  
....................                          } 
....................  
....................                  if(contador1==4) do_proceso1(); 
0E43:  MOVF   2A,W
0E44:  SUBLW  04
0E45:  BTFSS  03.2
0E46:  GOTO   64A
0E47:  BCF    0A.3
0E48:  CALL   2A8
0E49:  BSF    0A.3
....................                  if(contador4==16) do_proceso4(); 
0E4A:  MOVF   2D,W
0E4B:  SUBLW  10
0E4C:  BTFSS  03.2
0E4D:  GOTO   651
0E4E:  BCF    0A.3
0E4F:  CALL   305
0E50:  BSF    0A.3
....................           
....................                  if(tecla_pulsada=='3'){ 
0E51:  MOVF   28,W
0E52:  SUBLW  33
0E53:  BTFSS  03.2
0E54:  GOTO   656
....................                       break; 
0E55:  GOTO   65E
....................                   } 
....................                  if(tecla_pulsada=='2'){ 
0E56:  MOVF   28,W
0E57:  SUBLW  32
0E58:  BTFSS  03.2
0E59:  GOTO   65B
....................                       break; 
0E5A:  GOTO   65E
....................                   } 
....................                   contador1++; 
0E5B:  INCF   2A,F
....................                    
....................               } 
0E5C:  INCF   2D,F
0E5D:  GOTO   592
....................           } 
....................            
....................            
....................            
....................     
.................... }//////// 
....................  
.................... void main(){ 
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  BSF    03.5
0805:  BSF    03.6
0806:  BCF    07.3
0807:  MOVLW  19
0808:  BCF    03.6
0809:  MOVWF  19
080A:  MOVLW  A6
080B:  MOVWF  18
080C:  MOVLW  90
080D:  BCF    03.5
080E:  MOVWF  18
080F:  CLRF   2A
0810:  CLRF   2B
0811:  CLRF   2C
0812:  CLRF   2D
0813:  MOVLW  03
0814:  MOVWF  34
0815:  MOVLW  E8
0816:  MOVWF  33
0817:  MOVLW  07
0818:  MOVWF  36
0819:  MOVLW  D0
081A:  MOVWF  35
081B:  MOVLW  0B
081C:  MOVWF  38
081D:  MOVLW  B8
081E:  MOVWF  37
081F:  MOVLW  0F
0820:  MOVWF  3A
0821:  MOVLW  A0
0822:  MOVWF  39
0823:  CLRF   3C
0824:  MOVLW  FA
0825:  MOVWF  3B
0826:  BSF    03.5
0827:  BSF    03.6
0828:  MOVF   09,W
0829:  ANDLW  C0
082A:  MOVWF  09
082B:  BCF    03.6
082C:  BCF    1F.4
082D:  BCF    1F.5
082E:  MOVLW  00
082F:  BSF    03.6
0830:  MOVWF  08
0831:  BCF    03.5
0832:  CLRF   07
0833:  CLRF   08
0834:  CLRF   09
.................... setup_timer_0(rtcc_internal | rtcc_div_16);//quantun de 250 ms 
0835:  BSF    03.5
0836:  BCF    03.6
0837:  MOVF   01,W
0838:  ANDLW  C0
0839:  IORLW  03
083A:  MOVWF  01
.................... set_timer0(0x01); 
083B:  MOVLW  01
083C:  BCF    03.5
083D:  MOVWF  01
.................... enable_interrupts(global); 
083E:  MOVLW  C0
083F:  IORWF  0B,F
....................  
.................... tris_b=0; 
0840:  BSF    03.5
0841:  CLRF   06
.................... port_b=0; 
0842:  BCF    03.5
0843:  CLRF   06
.................... mensaje_recibido=0; 
0844:  CLRF   29
.................... lcd_init(); 
0845:  BCF    0A.3
0846:  GOTO   182
0847:  BSF    0A.3
.................... lcd_putc("hola"); 
0848:  MOVLW  AA
0849:  BSF    03.6
084A:  MOVWF  0D
084B:  MOVLW  00
084C:  MOVWF  0F
084D:  BCF    0A.3
084E:  BCF    03.6
084F:  CALL   205
0850:  BSF    0A.3
0851:  CLRF   27
0852:  BTFSC  0B.7
0853:  BSF    27.7
0854:  BCF    0B.7
.................... delay_ms(100); 
0855:  MOVLW  64
0856:  MOVWF  4E
0857:  BCF    0A.3
0858:  CALL   04A
0859:  BSF    0A.3
085A:  BTFSC  27.7
085B:  BSF    0B.7
.................... lcd_putc("\f"); 
085C:  MOVLW  AD
085D:  BSF    03.6
085E:  MOVWF  0D
085F:  MOVLW  00
0860:  MOVWF  0F
0861:  BCF    0A.3
0862:  BCF    03.6
0863:  CALL   205
0864:  BSF    0A.3
.................... lcd_putc("comprabando"); 
0865:  MOVLW  AE
0866:  BSF    03.6
0867:  MOVWF  0D
0868:  MOVLW  00
0869:  MOVWF  0F
086A:  BCF    0A.3
086B:  BCF    03.6
086C:  CALL   205
086D:  BSF    0A.3
.................... lcd_gotoxy(2,2); 
086E:  MOVLW  02
086F:  MOVWF  41
0870:  MOVWF  42
0871:  BCF    0A.3
0872:  CALL   1C8
0873:  BSF    0A.3
.................... lcd_putc("proceso..."); 
0874:  MOVLW  B4
0875:  BSF    03.6
0876:  MOVWF  0D
0877:  MOVLW  00
0878:  MOVWF  0F
0879:  BCF    0A.3
087A:  BCF    03.6
087B:  CALL   205
087C:  BSF    0A.3
087D:  CLRF   27
087E:  BTFSC  0B.7
087F:  BSF    27.7
0880:  BCF    0B.7
.................... delay_ms(100); 
0881:  MOVLW  64
0882:  MOVWF  4E
0883:  BCF    0A.3
0884:  CALL   04A
0885:  BSF    0A.3
0886:  BTFSC  27.7
0887:  BSF    0B.7
.................... rb6=0; 
0888:  BCF    06.6
....................  
.................... enable_interrupts(int_rda); 
0889:  BSF    03.5
088A:  BSF    0C.5
.................... enable_interrupts(int_timer0); 
088B:  BCF    03.5
088C:  BSF    0B.5
....................    while(true){             
....................          if(mensaje_recibido==1){ 
088D:  DECFSZ 29,W
088E:  GOTO   69C
....................                   lcd_putc("\f"); 
088F:  MOVLW  BA
0890:  BSF    03.6
0891:  MOVWF  0D
0892:  MOVLW  00
0893:  MOVWF  0F
0894:  BCF    0A.3
0895:  BCF    03.6
0896:  CALL   205
0897:  BSF    0A.3
....................                    
....................                if(tecla_pulsada=='1'){ 
0898:  MOVF   28,W
0899:  SUBLW  31
089A:  BTFSS  03.2
089B:  GOTO   65E
....................                do_proceso11(); 
....................                 
....................              
....................                   } 
....................                if(tecla_pulsada=='2'){ 
*
0E5E:  MOVF   28,W
0E5F:  SUBLW  32
0E60:  BTFSS  03.2
0E61:  GOTO   665
....................                    do_proceso2(); 
0E62:  BCF    0A.3
0E63:  CALL   2C7
0E64:  BSF    0A.3
....................                   } 
....................                if(tecla_pulsada=='3'){ 
0E65:  MOVF   28,W
0E66:  SUBLW  33
0E67:  BTFSS  03.2
0E68:  GOTO   66C
....................                     do_proceso3(); 
0E69:  BCF    0A.3
0E6A:  CALL   2E6
0E6B:  BSF    0A.3
....................                   } 
....................                 if(tecla_pulsada=='4'){ 
0E6C:  MOVF   28,W
0E6D:  SUBLW  34
0E6E:  BTFSS  03.2
0E6F:  GOTO   673
....................                   do_proceso4(); 
0E70:  BCF    0A.3
0E71:  CALL   305
0E72:  BSF    0A.3
....................                   }    
....................                 if(tecla_pulsada=='s'){ 
0E73:  MOVF   28,W
0E74:  SUBLW  73
0E75:  BTFSS  03.2
0E76:  GOTO   69B
....................                   lcd_putc("\f"); 
0E77:  MOVLW  BB
0E78:  BSF    03.6
0E79:  MOVWF  0D
0E7A:  MOVLW  00
0E7B:  MOVWF  0F
0E7C:  BCF    0A.3
0E7D:  BCF    03.6
0E7E:  CALL   205
0E7F:  BSF    0A.3
....................                   lcd_putc("sist.oper. XAK");  
0E80:  MOVLW  BC
0E81:  BSF    03.6
0E82:  MOVWF  0D
0E83:  MOVLW  00
0E84:  MOVWF  0F
0E85:  BCF    0A.3
0E86:  BCF    03.6
0E87:  CALL   205
0E88:  BSF    0A.3
....................                    puts("sistema operativo XAK"); 
0E89:  MOVLW  C4
0E8A:  BSF    03.6
0E8B:  MOVWF  0D
0E8C:  MOVLW  00
0E8D:  MOVWF  0F
0E8E:  BCF    0A.3
0E8F:  BCF    03.6
0E90:  CALL   260
0E91:  BSF    0A.3
0E92:  MOVLW  0D
0E93:  BTFSS  0C.4
0E94:  GOTO   693
0E95:  MOVWF  19
0E96:  MOVLW  0A
0E97:  BTFSS  0C.4
0E98:  GOTO   697
0E99:  MOVWF  19
....................                   rb5=1; 
0E9A:  BSF    06.5
....................                   } 
....................  
....................                   mensaje_recibido=0; 
0E9B:  CLRF   29
.................... //!                   
.................... //!                  while(1){ 
.................... //!                        
.................... //!                  
.................... //!                  } 
....................              } 
....................         } 
0E9C:  GOTO   08D
....................   } 
0E9D:  SLEEP

Configuration Fuses:
   Word  1: 2FE1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
